import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager

import groovy.json.JsonSlurper
/**
* A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
*
* This script is automatically generated by ngrinder.
*
* @author admin
*/
import java.time.LocalDateTime
import java.time.LocalDate
import java.time.format.DateTimeFormatter

@RunWith(GrinderRunner)
class TestRunner {

	def toJSON = { new JsonSlurper().parseText(it) }

	public static GTest test1
	public static GTest test2
	public static GTest test3
	public static HTTPRequest requestForJson
	public static HTTPRequest requestForMultipart
	public static Map<String, String> headersForJson = [:]
	public static Map<String, String> headersForMultipart = [:]
	public List<Map> StoryBoxInfo
	
	public static Map<String, String> testUser1 = [
		email: "tncks097@naver.com",
		password: "Qwert1234!"
	]

	public static Map<String, String> randomStoryBox = [
		name: getRandomString(5),
		detail: getRandomString(20),
		blind: new Random().nextBoolean(),
		finishedAt: getRandomDateTime().format(DateTimeFormatter.ISO_LOCAL_DATE)
	]
	
	public static List<Cookie> cookies = []
	public static accessToken;

@BeforeProcess
public static void beforeProcess() {
    HTTPRequestControl.setConnectionTimeout(300000);
    
    test1 = new GTest(1, "172.27.192.1 - login");
    test2 = new GTest(2, "172.27.192.1 - mainpage");
    test3 = new GTest(3, "172.27.192.1 - createBox");

    // Create request for JSON
    requestForJson = new HTTPRequest();
    headersForJson.put("Content-Type", "application/json");
    requestForJson.setHeaders(headersForJson);

    // Create request for Multipart
    requestForMultipart = new HTTPRequest();
	String boundary = "customBoundary";
    headersForMultipart.put("Content-Type", "multipart/form-data; boundary=" + boundary);  // Setting a custom boundary
    requestForMultipart.setHeaders(headersForMultipart);

    grinder.logger.info("before process.");
}

	@BeforeThread
	public void beforeThread() {
		test1.record(this, "test1")
		test2.record(this, "test2")
		test3.record(this, "test3")
		grinder.statistics.delayReports = true
		grinder.logger.info("before thread.")
	}

	@Before
	public void before() {
		CookieManager.addCookies(cookies)
		grinder.logger.info("before. init headers and cookies")
	}
	
	private static String url = "http://172.27.192.1:8080" 
	
	// 로그인 -> 진행중인 스토리박스 | 끝난 스토리박스 | 간략한 Info
	
	@Test
	public void test1() {
		HTTPResponse loginResponse = requestForJson.POST(url+"/api/member/signin", testUser1)

		if (loginResponse.statusCode == 301 || loginResponse.statusCode == 302) {
			grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
		} else {
			assertThat(loginResponse.statusCode, is(200))
			accessToken = loginResponse.getBody(toJSON).detail.grantType + " " + loginResponse.getBody(toJSON).detail.accessToken
			
		}
		

		headersForJson.put("access_token", accessToken)
		headersForMultipart.put("access_token", accessToken)
		
		requestForJson.setHeaders(headersForJson)
		requestForMultipart.setHeaders(headersForMultipart)
	}
	
	@Test
	public void test2() {

		HTTPResponse storyResponse = requestForJson.GET(url+"/api/story/mainpage")
		HTTPResponse storyBoxResponse = requestForJson.GET(url+"/api/story-box/mainpage")

		HTTPResponse MyInfoResponse = requestForJson.GET(url+"/api/member/inform")
		
// 1. 응답 본문을 얻음
String responseBody = storyBoxResponse.getBodyText()

// 2. 응답 본문을 JSON 객체로 파싱
def json = new JsonSlurper().parseText(responseBody)

// 3. 파싱된 JSON 객체에서 'details' 정보를 가져옴
def details = json.detail

// 출력 (선택 사항)
StoryBoxInfo = details

		grinder.logger.info("===="+StoryBoxInfo)
		
		if (storyResponse.statusCode == 301 || storyResponse.statusCode == 302) {
			grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
		} else {
			assertThat(storyResponse.statusCode, is(200))
		}
		

		
	}
	
	
	@Test
	public void test3() {

   // Convert randomStoryBox map to JSON string
    def jsonPayload = new groovy.json.JsonBuilder(randomStoryBox).toPrettyString();

    // Define a boundary for multipart/form-data
    String boundary = "customBoundary";
    String lineBreak = "\r\n";

    // Construct the multipart/form-data body
    String multipartBody = "--" + boundary + lineBreak +
                           "Content-Disposition: form-data; name=\"storyBoxInfo\"" + lineBreak +
                           "Content-Type: application/json" + lineBreak + lineBreak +
                           jsonPayload + lineBreak +
                           "--" + boundary + "--" + lineBreak;

    // Convert the multipartBody string to byte array
    byte[] byteData = multipartBody.getBytes("UTF-8");

    // Send the POST request
    HTTPResponse createStoryBoxResponse = requestForMultipart.POST(url+"/api/story-box/create", byteData);


		if (createStoryBoxResponse.statusCode == 301 || createStoryBoxResponse.statusCode == 302) {
			grinder.logger.warn("Warning. The response may not be correct. The response code was {}.")
		} else {
			assertThat(createStoryBoxResponse.statusCode, is(200))
			
		}
	}
	

    private static String getRandomString(int length) {
        def chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
        def randomString = new StringBuilder()
        for (int i = 0; i < length; i++) {
            randomString.append(chars.charAt(new Random().nextInt(chars.length())))
        }
        return randomString.toString()
    }

    private static LocalDate getRandomDateTime() {
        return LocalDate.now().plusDays(10);
    }


}
